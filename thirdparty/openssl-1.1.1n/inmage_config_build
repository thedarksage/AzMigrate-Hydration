#! /bin/sh

# check command line option for --help
if [ "$1" = "--help" ] ; then 
	 echo " "
	 echo "inmage_config_build [--help | --clean] "
	 echo " "
	 echo "Configures and builds the openssl third party package."
	 echo " "
	 echo " clean : cleans (deletes) all build and configuration outputs."
	 echo "         You will need to rerun inmage_config_build to regenreate all the data"
	 echo "         This maybe needed if their is a failure during the initial config build"
	 echo " --help: display this message"
	 echo " "
	 exit 0
fi

# Specific for SLES11-32 and RHEL6-32 series only.
# Need to replace -m486 with -mtune=i486 in ./Configure for SLES11-32 and RHEL6-32
if [ -f /etc/SuSE-release ] &&  grep -q 'VERSION = 11' /etc/SuSE-release ; then
	case `uname -m` in
	i586|i686)
        	OSNAME=SLES11_32
	;;
	esac
elif [ -f /etc/redhat-release ] && grep -q 'Red Hat Enterprise Linux Server release 6.[0-9]' /etc/redhat-release || \
				   grep -q 'CentOS release 6.[0-9] (Final)' /etc/redhat-release ; then
       case `uname -m` in
         i586|i686)
               OSNAME=RHEL6_32
       ;;
       esac
fi

# go to correct directory
DIR=`dirname $0`
cd "$DIR"

# play it safe and make sure config is executable
chmod 777 ./config ./Configure

# get the specific distro version and gcc version that will be used to create the final lib dirs
if [ "" = "$X_SPECIFIC" ] ; then 
	 SPECIFIC_VERSION=`../../host/get-specific-version-info`
else
	 SPECIFIC_VERSION="$X_SPECIFIC"
fi

# check command line option for --clean
if [ "$1" = "--clean" ] ; then 
	 make clean
	 rm -f ran_release_config ran_debug_config lib/${SPECIFIC_VERSION}/release/* lib/${SPECIFIC_VERSION}/debug/*
	 mkdir -p include/openssl
	 exit 0
fi

# set up default compiler options
if [ "" = "$X_ARCH" ] ; then 
	 SYSTEM=`uname`
else
	 SYSTEM="$X_ARCH"
fi

case $SYSTEM in
	 SunOS)
		  NOSSE2=
		  BITS=`isainfo -b`
		  if [ "64" = "${BITS}" ] ; then
			USE64BIT=-m64
		  else
			USE64BIT=
		  fi
		  SPARCV=`isainfo -k`
		  if [ "amd64" = "$SPARCV" ] ; then
			  SPARCV=x86_64
		  fi
		  CONFIGURE="./Configure solaris${BITS}-${SPARCV}-gcc"
		  DEBUG=
		  PTHREAD=-pthreads
		  LPTHREAD=-lpthread
		  SYMTAB_FLAG=-gdwarf-2
		  TSFLAG=
		  ;;
	 Linux)
		  if [ "$OSNAME" = "SLES11_32" -o "$OSNAME" = "RHEL6_32" ] ; then
			  # Here it uses cc which is a symbolic link to gcc. Please see ls -al /usr/bin/cc
			  CONFIGURE='./Configure 386 linux-elf'
			  sed -e 's|-m486|-mtune=i486|g' Configure > Configure.bak
			  mv Configure.bak Configure			
			  chmod +x Configure
		  else
			  CONFIGURE=./config	
		  fi
		  NOSSE2=-mno-sse2
		  USE64BIT=
		  DEBUG=-d
		  PTHREAD=-pthread
		  LPTHREAD=-lpthread
		  SYMTAB_FLAG=-g
		  TSFLAG=
		  ;;
         AIX)
		  CONFIGURE='./Configure aix-gcc no-asm'
		  NOSSE2=
		  BITS=`bootinfo -K`
		  if  [ "64" = "${BITS}" ] ; then
			  USE64BIT=-maix64
			  OBJECT_MODE=64
			  export OBJECT_MODE
		  else
			  USE64BIT=	
		  fi
		  PTHREAD=-pthread
		  LPTHREAD=-lpthread
		  SYMTAB_FLAG=-gxcoff
		  TSFLAG=-DTHREAD_SAFE
		  DEBUG=debug
		  ;;
	 *)
		  echo "ERROR running $0 (in $DIR/)"
		  echo "  platform $SYSTEM not supported yet"
		  echo "  see inmage-make-system-users-guid.txt for details on adding support"
		  exit 1
		  ;;
esac		  

# set up defaults
DEFAULT_CFLAGS="-D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -D_FILE_OFFSET_BITS=64 ${NOSSE2} ${USE64BIT} ${PTHREAD} ${SYMTAB_FLAG} ${TSFLAG}"
LDFLAGS="${USE64BIT} ${PTHREAD} ${LPTHREAD}"
export LDFLAGS

# create dirs as needed
mkdir -p lib
mkdir -p lib/${SPECIFIC_VERSION}
mkdir -p lib/${SPECIFIC_VERSION}/release
mkdir -p lib/${SPECIFIC_VERSION}/debug

# openssl doesn't support running config from a different directory 
# so we end up having to run both release and debug from the same directory

# confgure debug
if [ ! -f ran_debug_config ] ; then 
	 if [ -f Makefile ] ; then
		  make clean
	 fi
         if [ "$OSNAME" = "SLES11_32" -o "$OSNAME" = "RHEL6_32" ] ; then
             ./Configure 386 debug-linux-elf no-shared threads -DDEBUG ${DEFAULT_CFLAGS}
         else
             ${CONFIGURE} ${DEBUG} no-shared threads -DDEBUG ${DEFAULT_CFLAGS}
         fi
         touch ran_debug_config
fi

# build debug
make

# copy files to final destination
cp libcrypto.a libssl.a lib/${SPECIFIC_VERSION}/debug

# configure for release
if [ ! -f ran_release_config ] ; then 
	 if [ -f Makefile ] ; then
		  make clean
	 fi
	 ${CONFIGURE} no-shared threads -DNDEBUG ${DEFAULT_CFLAGS}
	 touch ran_release_config 
fi

# build release
make

# copy files to final destination
cp libcrypto.a libssl.a lib/${SPECIFIC_VERSION}/release

exit 0

