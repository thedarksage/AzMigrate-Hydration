#!/bin/sh

# check command line option for --help
if [ "$1" = "--help" ] ; then 
	 echo " "
	 echo "inmage_config_build [--help | --clean] "
	 echo " "
	 echo "Configures and builds the ace third party package."
	 echo " "
	 echo " clean : cleans (deletes) all build and configuration outputs."
	 echo "         You will need to rerun inmage_config_build to regenreate all the data"
	 echo "         This maybe needed if their is a failure during the initial config build"
	 echo " --help: display this message"
	 echo " "
	 exit 0
fi

echo "buildEcho 1:"
echo `pwd`


# go to correct directory
DIR=`dirname $0`
cd "$DIR"

echo "buildEcho 2:"
echo `pwd`

# set up default compiler options
if [ "" = "$X_ARCH" ] ; then 
	 SYSTEM=`uname`
else
	 SYSTEM="$X_ARCH"
fi

case $SYSTEM in
	SunOS)
		NOSSE2=
		BITS=`isainfo -b`
		if [ "64" = "${BITS}" ] ; then
			USE64BIT=-m64
		else
			USE64BIt=
		fi
        	PTHREAD=-pthreads
        	LPTHREAD=-lpthread
        	SYMTAB_FLAG=-gdwarf-2
        	TSFLAG=
		;;
	Linux)
		NOSSE2=-mno-sse2
		USE64BIT=
		PTHREAD=-pthread
        	LPTHREAD=-lpthread
        	SYMTAB_FLAG=-g
        	TSFLAG=
		;;
	AIX)
		BITS=`bootinfo -K`
		if [ "64" = "${BITS}" ] ; then
			USE64BIT=-maix64
			OBJECT_MODE=64
			export OBJECT_MODE
		else
			USE64BIT=
		fi
		NOSSE2=
		PTHREAD=-pthread
        	LPTHREAD=-lpthread
        	SYMTAB_FLAG=-gxcoff
        	TSFLAG=-DTHREAD_SAFE
		DTSSIZE="-DACE_DEFAULT_THREAD_STACKSIZE=1048576"
		;;
	*)
		echo "ERROR running $0 (in $DIR/)"
		echo "  platform $SYSTEM not supported yet"
		echo "  see inmage-make-system-users-guid.txt for details on adding support"
		exit 1
		;;
esac		  

# need to get the thirdparty dir
# we know that for ace inmage_config_build is under the subdir ACE_wrappers of the ace dir 
# so we need to get current dir and then get the dirname of the dirname of that
THIRDPARTY_DIR=`pwd | xargs dirname | xargs dirname`

export ACE_ROOT=${THIRDPARTY_DIR}/ace-6.4.6/ACE_wrappers
echo "buildEcho 3: ACE_ROOT=${ACE_ROOT}"

# get the specific distro version and gcc version that will be used to create the final lib dirs
if [ "" = "$X_SPECIFIC" ] ; then 
	 SPECIFIC_VERSION=`../../../host/get-specific-version-info`
else
	 SPECIFIC_VERSION="$X_SPECIFIC"
fi

. ${THIRDPARTY_DIR}/../build/scripts/general/OS_details.sh

if [ "${OS}" = "SLES12-64" ]; then
    PERMISSIVE=-fpermissive
fi

# check command line option for --clean
if [ "$1" = "--clean" ] ; then 
     cd ace
     echo "buildEcho : clean:"
     echo `pwd`
     make realclean
     cd ..
	 rm -Rf lib/* ace/libACE.a
	 exit 0
fi

# set up defaults
CPPFLAGS="-DACE_AS_STATIC -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -D_FILE_OFFSET_BITS=64 ${NOSSE2} ${USE64BIT} ${PTHREAD} ${SYMTAB_FLAG} ${TSFLAG} ${DTSSIZE} ${PERMISSIVE}" 
export CPPFLAGS
CFLAGS="-DACE_AS_STATIC -D_LARGEFILE_SOURCE=1 -D_LARGEFILE64_SOURCE=1 -D_FILE_OFFSET_BITS=64 ${NOSSE2} ${USE64BIT} ${PTHREAD} ${SYMTAB_FLAG} ${TSFLAG} ${DTSSIZE} ${PERMISSIVE}" 
export CFLAGS

# create dirs
mkdir -p lib
mkdir -p lib/${SPECIFIC_VERSION}
mkdir -p lib/${SPECIFIC_VERSION}/release
mkdir -p lib/${SPECIFIC_VERSION}/debug

# build debug (only build ace not all the examples)
cd ace

echo "buildEcho 4:"
echo `pwd`

LDFLAGS="-L${THIRDPARTY_DIR}/zlib-1.2.8/lib/${SPECIFIC_VERSION}/debug ${USE64BIT} ${PTHREAD} ${LPTHREAD}"
export LDFLAGS
make static_libs_only=1 threads=1 debug=1
if [ 0 -ne $? ] ; then 
    echo "error ace debug build failed"
    exit 1
fi

echo "buildEcho 5:"
echo `pwd`

# copy files to final destination
cp libACE.a ../lib/${SPECIFIC_VERSION}/debug

# check cp success

# cleanup to make release build
make realclean
rm -Rf libACE.a

# back to top level for this package
cd ..

# build release (only ace not all the examples)
cd ace

echo "buildEcho 6:"
echo `pwd`

LDFLAGS="-L${THIRDPARTY_DIR}/zlib-1.2.8/lib/${SPECIFIC_VERSION}/release ${USE64BIT} ${PTHREAD} ${LPTHREAD}"
export LDFLAGS
make static_libs_only=1 threads=1 debug=0
if [ 0 -ne $? ] ; then 
    echo "error ace release build failed"
    exit 1
fi
echo "buildEcho 7:"
echo `pwd`

# copy files to final destination
cp libACE.a ../lib/${SPECIFIC_VERSION}/release
rm -Rf libACE.a

echo "buildEcho 8: build successful"
exit 0
