To build boost
--------------
* Windows:
  + under boost-build-win dir
    + boost-build-win.vcproj
      + relies on inmage_config_build.bat
      + add to your solution
      + change the -d option to the version of boost to be built

    + inmage_config_build.bat
      + run from command line
      + make sure the proper msvc environment has been set

* unix/linux:
  + uses inmage-config_build
    + automatclly run by the InMage make system

    + can manual run from thirdparty/boost

Notes:
  + prior to 1_40_0 boost was headers only

  + boost-build-win should be branched with each release so that if a
    new version of boost is added, the release will still use the same
    boost version used for that release

  + inmage_config_build should be branched with each release in case
    it needs to modified for newer versions of boost, or it should be
    modified in a way to handle older and newer versions of boost.

  + if new parts of boost need to be built, they should be added to
    both inmage_config_build for unix/linux and inmage_config_build.bat
    for windows.

  + if the libraries to be built have changed, send an email out to let
    everyone know they may need to do a clean on boost and rebuild it.

To upgrade to a new version of boost
------------------------------------
* download the new version

* untar under thirdaprty/boost so that it ends in a directory named

  thirdparty/boost/boost_<version>

where version is the boost version (this is usually done by default
when untaring)

e.g.

  thirdparty/boost/boost_1_40_0

* update the following boost files

  1) boost/interprocess/sync/interprocess_condtion.hpp change

      enum { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };

    to

      enum BOOST_IC { SLEEP = 0, NOTIFY_ONE, NOTIFY_ALL };

  2) epoll_reactor.hpp change

       enum { read_op = 0, write_op = 1,

     to

       enum op_types { read_op = 0, write_op = 1,

  3) boost/dynamic_bitset/dynamic_bitset.hpp
       BOOST_STATIC_ASSERT(detail::dynamic_bitset_impl::allowed_block_type<Block>::value); 

     to

       BOOST_STATIC_ASSERT((bool)detail::dynamic_bitset_impl::allowed_block_type<Block>::value);

  4) boost/multi_index/detail/scope_guard.hpp change

       template<typename J>
       static void safe_execute(J& j){if(!j.dismissed_)j.execute();}

     to 
     
       template<typename J>
       static void safe_execute(J& j)
       {
           if(!j.dismissed_)
       #ifndef BOOST_NO_EXCEPTIONS           
               try {
       #endif              
                   j.execute();
       #ifndef BOOST_NO_EXCEPTIONS               
               } catch (...) {
               }
       #endif      
       }

NOTE:
  + BOOST_IC is just a name that needs to be unique, so if there
    are an compilation complaints about that name, change it to
    something else.

  + op_types is used in the kqueue header (solaris equivalent of
    epoll) so it should not cause problems. If it does then use
    a different name.

  + This is needed because OpenSUSE10 (32 and 64 bit) use gcc
    4.0.2 version that has a bug that complains about anonymous enum
    (they should be allowed). This step will not be needed once we
    no longer use that version of gcc.
  + Compiler flag -fpermissive is added to linux-rules.mak and AIX-rules.mak
    to avoid compile errors building cxps and cxpscli. Remove these workarounds
    after upgrading boost to 1.46. 
    Offending code: ../thirdparty/boost/boost_1_43_0/boost/interprocess/detail/transform_iterator.hpp:57:15:
    error: reference 창value창annot be declared 창table창-fpermissive]


* update host/thirdparty.mak by changing the BOOST_VERSION to the new
  boost version.

  NOTE: solaris 8 and solaris 9 currently need to use boost_1_40_0 so
  make sure to leave the 1_40_0 for Solaris 8 and 9 and change the
  other ones

  ifeq (SunOS,$(X_SUNOS))
  ifeq (Solaris-5-9-Sparc,$(X_OS))
  BOOST_VERSION := 1_40_0
  else

  ifeq (Solaris-5-8-Sparc,$(X_OS))
  BOOST_VERSION := 1_40_0
  else
  BOOST_VERSION := 1_43_0
  endif

  endif
  else
  BOOST_VERSION := 1_43_0
  endif

* update boost-buld-win project in host.sln by changing its
  properties. Update the -d option to the new boost version. Make sure
  to update it for both debug and release

* update the win-rules.vsprops (you can do this from host.sln
  "Property Manager" tab and open it from any project under any
  configuration (or use a text editor to open win-rules.vsprops).
  Change BOOST_INCLUDES and BOOST_LIB_DIR values to the new boost
  version

* build on windows, linux, solaris (note you do not need to build on
  every single platform), this is jut to make sure all the changes
  were made correctly.  Let build team know that a new version of
  boost is being used

* add everything under the new boost version directory to cvs

* commit

* remove the old boost version from cvs head branch (note it should
  have been branched with any previous release branches)

* send email to let everyone know they need to update thirdparty boost
  to get this new version
